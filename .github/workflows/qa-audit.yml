name: QA Audit
on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  qa-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Run QA audit
        run: |
          QA_BASE_URL="${{ secrets.QA_BASE_URL || 'http://localhost:3000' }}" npm run qa:all
        env:
          CI: true
          
      - name: Upload QA reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: qa-reports-${{ github.run_number }}
          path: qa-reports/
          retention-days: 30
          
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.run_number }}
          path: playwright-report/
          retention-days: 30
          
      - name: Comment PR with QA results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('qa-reports/link-audit.json')) {
              const report = JSON.parse(fs.readFileSync('qa-reports/link-audit.json', 'utf8'));
              const summary = report.summary;
              
              const comment = `## 🔍 QA Audit Results
              
              **Pages Scanned:** ${summary.totalScanned}
              **Success Rate:** ${summary.successRate}
              **Failures:** ${summary.totalFailures}
              
              ${summary.totalFailures > 0 ? '❌ **Issues Found:**' : '✅ **All checks passed!**'}
              ${summary.placeholdersFound.length > 0 ? `\n- ${summary.placeholdersFound.length} pages with placeholder content` : ''}
              ${summary.brokenLinks.length > 0 ? `\n- ${summary.brokenLinks.length} broken links` : ''}
              ${summary.ctaIssues.length > 0 ? `\n- ${summary.ctaIssues.length} CTA issues` : ''}
              
              📊 Full report available in artifacts.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }