version: '3.8'

services:
  # Node.js TypeScript Server
  api-server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - CORS_ORIGIN=http://localhost:8080
    volumes:
      - ./server/.env:/app/.env:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
        - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
        - VITE_SITE_URL=${VITE_SITE_URL}
        - VITE_API_URL=http://api-server:3001
    env_file:
      - .env.production
    environment:
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
      - VITE_SITE_URL=${VITE_SITE_URL}
      - VITE_API_URL=http://api-server:3001
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "node -e \"require('http').get('http://localhost:4173', res => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1));\""
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      api-server:
        condition: service_healthy

  # Caddy Proxy Server
  caddy:
    image: caddy:2
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - app
      - api-server

volumes:
  caddy_data:
  caddy_config: